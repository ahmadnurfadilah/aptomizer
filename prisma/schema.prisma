// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  walletAddress String    @unique
  displayName   String?
  email         String?
  avatarUrl     String?
  bio           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  aiWallet      AiWallet?
  riskProfile   RiskProfile?
  transactions  Transaction[]
}

model AiWallet {
  id            String   @id @default(cuid())
  walletAddress String   @unique
  privateKey    String
  publicKey     String
  status        String   @default("active") // active, paused, disabled
  balance       Float    @default(0)
  lastActivity  DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[]
}

model RiskProfile {
  id                 String   @id @default(cuid())
  riskTolerance      Int      // 1-10 scale
  investmentGoals    String[] // Array of goals
  timeHorizon        String   // Short, Medium, Long
  experienceLevel    String   // Beginner, Intermediate, Advanced
  preferredAssets    String[] // Types of assets preferred
  volatilityTolerance Int      // 1-10 scale
  incomeRequirement  Boolean  // Whether regular income is required
  rebalancingFrequency String  // Daily, Weekly, Monthly, Quarterly
  maxDrawdown        Int?     // Maximum acceptable percentage loss
  targetAPY          Int?     // Target annual percentage yield
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id            String   @id @default(cuid())
  txHash        String?  @unique
  type          String   // swap, stake, unstake, provide_liquidity, withdraw_liquidity, etc.
  status        String   // pending, completed, failed
  amount        Float
  tokenAddress  String
  tokenSymbol   String
  toAddress     String?
  toTokenAddress String?
  toTokenSymbol String?
  fee           Float?
  timestamp     DateTime @default(now())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  aiWalletId    String?
  aiWallet      AiWallet? @relation(fields: [aiWalletId], references: [id], onDelete: SetNull)
}
